diff --git a/node_modules/rescript-vitest/lib/bs/.bsbuild b/node_modules/rescript-vitest/lib/bs/.bsbuild
new file mode 100644
index 0000000..fbb8ced
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/.bsbuild
@@ -0,0 +1,5 @@
+1
+Vitest
+src	
+1
+0
diff --git a/node_modules/rescript-vitest/lib/bs/.bsdeps b/node_modules/rescript-vitest/lib/bs/.bsdeps
new file mode 100644
index 0000000..0551c14
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/.bsdeps
@@ -0,0 +1,7 @@
+11.0.1
+/Users/czabaj/Development/github.com/czabaj/check.beer-re/node_modules/rescript-vitest
+1 -bs-package-output es6:.:.res.js4Automatic
+bsconfig.json	0x1.97b2388p+30
+src	0x1.97b238fcp+30
+===
+/Users/czabaj/Development/github.com/czabaj/check.beer-re/node_modules/rescript/darwinarm64/rescript.exe	0x1.97b24b84p+30
diff --git a/node_modules/rescript-vitest/lib/bs/.compiler.log b/node_modules/rescript-vitest/lib/bs/.compiler.log
new file mode 100644
index 0000000..f8ce083
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/.compiler.log
@@ -0,0 +1,2 @@
+#Start(1710002913689)
+#Done(1710002913752)
diff --git a/node_modules/rescript-vitest/lib/bs/.ninja_log b/node_modules/rescript-vitest/lib/bs/.ninja_log
new file mode 100644
index 0000000..9dc4baf
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/.ninja_log
@@ -0,0 +1,40 @@
+# ninja log v6
+0	14	1710001744940662094	src/Vitest.ast	5efb89c75e599658
+14	21	1710001744948057096	src/Vitest.d	7cc8434ac7d9dce6
+0	22	1710001972051939891	src/Vitest.ast	5efb89c75e599658
+22	28	1710001972051939891	src/Vitest.d	7cc8434ac7d9dce6
+0	12	1710001988079534390	src/Vitest.ast	5efb89c75e599658
+13	18	1710001988079534390	src/Vitest.d	7cc8434ac7d9dce6
+0	13	1710001998574573847	src/Vitest.ast	5efb89c75e599658
+13	18	1710001998574573847	src/Vitest.d	7cc8434ac7d9dce6
+0	22	1710002012317075190	src/Vitest.ast	5efb89c75e599658
+22	28	1710002012317075190	src/Vitest.d	7cc8434ac7d9dce6
+0	27	1710002054822969350	src/Vitest.ast	5efb89c75e599658
+27	33	1710002054822969350	src/Vitest.d	7cc8434ac7d9dce6
+0	12	1710002068569384680	src/Vitest.ast	5efb89c75e599658
+12	18	1710002068569384680	src/Vitest.d	7cc8434ac7d9dce6
+0	22	1710002084241866351	src/Vitest.ast	5efb89c75e599658
+22	28	1710002084241866351	src/Vitest.d	7cc8434ac7d9dce6
+0	26	1710002149853293589	src/Vitest.ast	5efb89c75e599658
+26	32	1710002149853293589	src/Vitest.d	7cc8434ac7d9dce6
+0	13	1710002261599585425	src/Vitest.ast	5efb89c75e599658
+13	20	1710002261599585425	src/Vitest.d	7cc8434ac7d9dce6
+0	26	1710002321993702418	src/Vitest.ast	5efb89c75e599658
+26	31	1710002321993702418	src/Vitest.d	7cc8434ac7d9dce6
+0	12	1710002422191256832	src/Vitest.ast	5efb89c75e599658
+12	18	1710002422191256832	src/Vitest.d	7cc8434ac7d9dce6
+0	13	1710002494681976438	src/Vitest.ast	5efb89c75e599658
+13	18	1710002494681976438	src/Vitest.d	7cc8434ac7d9dce6
+0	13	1710002577879149870	src/Vitest.ast	5efb89c75e599658
+13	18	1710002577879149870	src/Vitest.d	7cc8434ac7d9dce6
+0	13	1710002657292956293	src/Vitest.ast	5efb89c75e599658
+13	18	1710002657292956293	src/Vitest.d	7cc8434ac7d9dce6
+0	22	1710002775755553267	src/Vitest.ast	5efb89c75e599658
+23	28	1710002775755553267	src/Vitest.d	7cc8434ac7d9dce6
+0	22	1710002794506581748	src/Vitest.ast	5efb89c75e599658
+22	28	1710002794506581748	src/Vitest.d	7cc8434ac7d9dce6
+0	21	1710002913710227289	src/Vitest.ast	5efb89c75e599658
+21	27	1710002913710227289	src/Vitest.d	7cc8434ac7d9dce6
+27	63	1710002913751712806	src/Vitest.cmj	ab86058c48bf4df8
+27	63	1710002913751712806	src/Vitest.cmi	ab86058c48bf4df8
+27	63	1710002913751712806	../../src/Vitest.res.js	ab86058c48bf4df8
diff --git a/node_modules/rescript-vitest/lib/bs/build.ninja b/node_modules/rescript-vitest/lib/bs/build.ninja
new file mode 100644
index 0000000..4f79d06
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/build.ninja
@@ -0,0 +1,13 @@
+rescript = 1
+rule astj
+  command = /Users/czabaj/Development/github.com/czabaj/check.beer-re/node_modules/rescript/darwinarm64/bsc.exe  -w a -bs-v 11.0.1 -bs-jsx 4 -bs-jsx-mode automatic -uncurried  -absname -bs-ast -o $out $i
+o src/Vitest.ast : astj ../../src/Vitest.res
+rule deps
+  command = /Users/czabaj/Development/github.com/czabaj/check.beer-re/node_modules/rescript/darwinarm64/bsb_helper.exe -hash d9771d00e0f7181bec047e2322f087f3 $in
+  restat = 1
+o src/Vitest.d : deps src/Vitest.ast
+rule mij
+  command = /Users/czabaj/Development/github.com/czabaj/check.beer-re/node_modules/rescript/darwinarm64/bsc.exe -I src   -w a -uncurried -bs-package-name rescript-vitest -bs-package-output es6:$in_d:.res.js $i
+  dyndep = 1
+  restat = 1
+o src/Vitest.cmj src/Vitest.cmi ../../src/Vitest.res.js : mij src/Vitest.ast
diff --git a/node_modules/rescript-vitest/lib/bs/install.ninja b/node_modules/rescript-vitest/lib/bs/install.ninja
new file mode 100644
index 0000000..5dd1c0f
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/bs/install.ninja
@@ -0,0 +1,10 @@
+rescript = 1
+rule cp
+  command = cp $i $out
+rule touch
+ command = touch $out
+o Vitest.cmi : cp ../bs/src/Vitest.cmi
+o Vitest.cmj : cp ../bs/src/Vitest.cmj
+o Vitest.cmt : cp ../bs/src/Vitest.cmt
+o Vitest.res : cp ../../src/Vitest.res
+build install.stamp : touch Vitest.cmi Vitest.cmj 
diff --git a/node_modules/rescript-vitest/lib/bs/src/Vitest.ast b/node_modules/rescript-vitest/lib/bs/src/Vitest.ast
new file mode 100644
index 0000000..d6341fc
Binary files /dev/null and b/node_modules/rescript-vitest/lib/bs/src/Vitest.ast differ
diff --git a/node_modules/rescript-vitest/lib/bs/src/Vitest.cmi b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmi
new file mode 100644
index 0000000..338dc60
Binary files /dev/null and b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmi differ
diff --git a/node_modules/rescript-vitest/lib/bs/src/Vitest.cmj b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmj
new file mode 100644
index 0000000..79ef54d
Binary files /dev/null and b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmj differ
diff --git a/node_modules/rescript-vitest/lib/bs/src/Vitest.cmt b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmt
new file mode 100644
index 0000000..666478d
Binary files /dev/null and b/node_modules/rescript-vitest/lib/bs/src/Vitest.cmt differ
diff --git a/node_modules/rescript-vitest/lib/bs/src/Vitest.d b/node_modules/rescript-vitest/lib/bs/src/Vitest.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-vitest/lib/ocaml/.compiler.log b/node_modules/rescript-vitest/lib/ocaml/.compiler.log
new file mode 100644
index 0000000..cf916db
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/ocaml/.compiler.log
@@ -0,0 +1,2 @@
+#Start(1710002913755)
+#Done(1710002913766)
diff --git a/node_modules/rescript-vitest/lib/ocaml/.ninja_log b/node_modules/rescript-vitest/lib/ocaml/.ninja_log
new file mode 100644
index 0000000..60ebc3b
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/ocaml/.ninja_log
@@ -0,0 +1,6 @@
+# ninja log v6
+0	5	1710002913760390579	Vitest.res	1d5003ea6b638978
+0	5	1710002913760440537	Vitest.cmi	79c024e437a07ede
+0	5	1710002913760480453	Vitest.cmj	698af2913106e111
+0	6	1710002913760546494	Vitest.cmt	8289da15b33b5e
+5	11	1710002913765923390	install.stamp	cff5a5b4c02d30cf
diff --git a/node_modules/rescript-vitest/lib/ocaml/Vitest.cmi b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmi
new file mode 100644
index 0000000..338dc60
Binary files /dev/null and b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmi differ
diff --git a/node_modules/rescript-vitest/lib/ocaml/Vitest.cmj b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmj
new file mode 100644
index 0000000..79ef54d
Binary files /dev/null and b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmj differ
diff --git a/node_modules/rescript-vitest/lib/ocaml/Vitest.cmt b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmt
new file mode 100644
index 0000000..666478d
Binary files /dev/null and b/node_modules/rescript-vitest/lib/ocaml/Vitest.cmt differ
diff --git a/node_modules/rescript-vitest/lib/ocaml/Vitest.res b/node_modules/rescript-vitest/lib/ocaml/Vitest.res
new file mode 100644
index 0000000..45c6c04
--- /dev/null
+++ b/node_modules/rescript-vitest/lib/ocaml/Vitest.res
@@ -0,0 +1,1223 @@
+type vitest
+
+type suite
+
+@module("vitest") @val
+external suite: suite = "expect"
+
+@send external assertions: (suite, int) => unit = "assertions"
+
+@send external hasAssertions: suite => unit = "hasAssertions"
+
+type expected<'a>
+
+@module("vitest") external expect: 'a => expected<'a> = "expect"
+
+%%private(
+  external cast_expeceted: expected<'a> => expected<'b> = "%identity"
+  external unwrap: expected<'a> => 'a = "%identity"
+  external wrap: 'a => expected<'a> = "%identity"
+)
+
+type benchOptions = {
+  time: option<int>,
+  iterations: option<int>,
+  warmupTime: option<int>,
+  warmupIterations: option<int>,
+}
+
+module type Runner = {
+  let describe: (string, unit => Js.undefined<unit>, Js.undefined<int>) => unit
+
+  let test: (string, unit => Js.undefined<unit>, Js.undefined<int>) => unit
+  let testAsync: (string, unit => promise<unit>, Js.undefined<int>) => unit
+
+  let it: (string, unit => Js.undefined<unit>, Js.undefined<int>) => unit
+  let itAsync: (string, unit => promise<unit>, Js.undefined<int>) => unit
+
+  let bench: (string, unit => Js.undefined<unit>, Js.undefined<benchOptions>) => unit
+  let benchAsync: (string, unit => promise<unit>, Js.undefined<benchOptions>) => unit
+}
+
+module type ConcurrentRunner = {
+  let describe: (string, unit => Js.undefined<unit>, Js.undefined<int>) => unit
+
+  let testAsync: (string, unit => promise<unit>, Js.undefined<int>) => unit
+
+  let itAsync: (string, unit => promise<unit>, Js.undefined<int>) => unit
+
+  let benchAsync: (string, unit => promise<unit>, Js.undefined<benchOptions>) => unit
+}
+
+module MakeRunner = (Runner: Runner) => {
+  @inline
+  let describe = (name, ~timeout=?, callback) =>
+    Runner.describe(
+      name,
+      () => {
+        callback()
+        Js.undefined
+      },
+      timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let test = (name, ~timeout=?, callback) =>
+    Runner.test(
+      name,
+      () => {
+        callback(suite)
+        Js.undefined
+      },
+      timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let testAsync = (name, ~timeout=?, callback) =>
+    Runner.testAsync(name, () => callback(suite), timeout->Js.Undefined.fromOption)
+
+  @deprecated("use testAsync instead")
+  let testPromise = testAsync
+
+  @inline
+  let it = (name, ~timeout=?, callback) =>
+    Runner.it(
+      name,
+      () => {
+        callback(suite)
+        Js.undefined
+      },
+      timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let itAsync = (name, ~timeout=?, callback) =>
+    Runner.itAsync(name, () => callback(suite), timeout->Js.Undefined.fromOption)
+
+  @deprecated("use itAsync instead")
+  let itPromise = itAsync
+
+  @inline
+  let bench = (name, ~time=?, ~iterations=?, ~warmupTime=?, ~warmupIterations=?, callback) =>
+    Runner.bench(
+      name,
+      () => {
+        callback(suite)
+        Js.undefined
+      },
+      Some({time, iterations, warmupTime, warmupIterations})->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let benchAsync = (name, ~time=?, ~iterations=?, ~warmupTime=?, ~warmupIterations=?, callback) =>
+    Runner.benchAsync(
+      name,
+      () => callback(suite),
+      Some({time, iterations, warmupTime, warmupIterations})->Js.Undefined.fromOption,
+    )
+
+  @deprecated("use benchAsync instead")
+  let benchPromise = benchAsync
+}
+
+module MakeConcurrentRunner = (Runner: ConcurrentRunner) => {
+  @inline
+  let describe = (name, ~timeout=?, callback) =>
+    Runner.describe(
+      name,
+      () => {
+        callback()
+        Js.undefined
+      },
+      timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let testAsync = (name, ~timeout=?, callback) =>
+    Runner.testAsync(name, () => callback(suite), timeout->Js.Undefined.fromOption)
+
+  @deprecated("use testAsync instead")
+  let test = testAsync
+
+  @inline
+  let itAsync = (name, ~timeout=?, callback) =>
+    Runner.itAsync(name, () => callback(suite), timeout->Js.Undefined.fromOption)
+
+  @deprecated("use itAsync instead")
+  let it = itAsync
+}
+
+include MakeRunner({
+  @module("vitest") @val
+  external describe: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
+    "describe"
+
+  @module("vitest") @val
+  external test: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit = "test"
+
+  @module("vitest") @val
+  external testAsync: (string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit = "test"
+
+  @module("vitest") @val
+  external it: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit = "it"
+
+  @module("vitest") @val
+  external itAsync: (string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit = "it"
+
+  @module("vitest") @val
+  external bench: (
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "bench"
+
+  @module("vitest") @val
+  external benchAsync: (
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "bench"
+})
+
+module Concurrent = {
+  type concurrent_describe
+  type concurrent_test
+  type concurrent_it
+  type concurrent_bench
+
+  %%private(
+    @module("vitest") @val
+    external concurrent_describe: concurrent_describe = "describe"
+
+    @module("vitest") @val
+    external concurrent_test: concurrent_test = "test"
+
+    @module("vitest") @val
+    external concurrent_it: concurrent_it = "it"
+
+    @module("vitest") @val
+    external concurrent_bench: concurrent_bench = "bench"
+  )
+
+  @send
+  external describe: (
+    concurrent_describe,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<int>,
+  ) => unit = "concurrent"
+
+  @send
+  external testAsync: (
+    concurrent_test,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<int>,
+  ) => unit = "concurrent"
+
+  @send
+  external itAsync: (
+    concurrent_it,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<int>,
+  ) => unit = "concurrent"
+
+  @send
+  external benchAsync: (
+    concurrent_bench,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "concurrent"
+
+  include MakeConcurrentRunner({
+    let describe = describe(concurrent_describe, ...)
+    let testAsync = testAsync(concurrent_test, ...)
+    let itAsync = itAsync(concurrent_it, ...)
+    let benchAsync = benchAsync(concurrent_bench, ...)
+  })
+}
+
+module Only = {
+  type only_describe
+  type only_test
+  type only_it
+  type only_bench
+
+  %%private(
+    @module("vitest") @val
+    external only_describe: only_describe = "describe"
+
+    @module("vitest") @val
+    external only_test: only_test = "test"
+
+    @module("vitest") @val
+    external only_it: only_it = "it"
+
+    @module("vitest") @val
+    external only_bench: only_bench = "bench"
+  )
+
+  @send
+  external describe: (
+    only_describe,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<int>,
+  ) => unit = "only"
+
+  @send
+  external test: (
+    only_test,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<int>,
+  ) => unit = "only"
+
+  @send
+  external testAsync: (
+    only_test,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<int>,
+  ) => unit = "only"
+
+  @send
+  external it: (only_it, string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
+    "only"
+
+  @send
+  external itAsync: (only_it, string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit =
+    "only"
+
+  @send
+  external bench: (
+    only_bench,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "only"
+
+  @send
+  external benchAsync: (
+    only_bench,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "only"
+
+  include MakeRunner({
+    let describe = describe(only_describe, ...)
+
+    let test = test(only_test, ...)
+    let testAsync = testAsync(only_test, ...)
+
+    let it = it(only_it, ...)
+    let itAsync = itAsync(only_it, ...)
+
+    let bench = bench(only_bench, ...)
+    let benchAsync = benchAsync(only_bench, ...)
+  })
+
+  module Concurrent = {
+    type concurrent_describe
+    type concurrent_test
+    type concurrent_it
+    type concurrent_bench
+
+    %%private(
+      @get
+      external concurrent_describe: only_describe => concurrent_describe = "only"
+
+      @get
+      external concurrent_test: only_test => concurrent_test = "only"
+
+      @get
+      external concurrent_it: only_it => concurrent_it = "only"
+
+      @get
+      external concurrent_bench: only_bench => concurrent_bench = "only"
+    )
+
+    @send
+    external describe: (
+      concurrent_describe,
+      string,
+      @uncurry unit => Js.undefined<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external testAsync: (
+      concurrent_test,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external itAsync: (
+      concurrent_it,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external benchAsync: (
+      concurrent_bench,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<benchOptions>,
+    ) => unit = "concurrent"
+
+    include MakeConcurrentRunner({
+      let describe = describe(concurrent_describe(only_describe, ...), ...)
+      let testAsync = testAsync(concurrent_test(only_test, ...), ...)
+      let itAsync = itAsync(concurrent_it(only_it, ...), ...)
+      let benchAsync = benchAsync(concurrent_bench(only_bench, ...), ...)
+    })
+  }
+}
+
+module Skip = {
+  type skip_describe
+  type skip_test
+  type skip_it
+  type skip_bench
+
+  %%private(
+    @module("vitest") @val
+    external skip_describe: skip_describe = "describe"
+
+    @module("vitest") @val
+    external skip_test: skip_test = "test"
+
+    @module("vitest") @val
+    external skip_it: skip_it = "it"
+
+    @module("vitest") @val
+    external skip_bench: skip_bench = "bench"
+  )
+
+  @send
+  external describe: (
+    skip_describe,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<int>,
+  ) => unit = "skip"
+
+  @send
+  external test: (
+    skip_test,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<int>,
+  ) => unit = "skip"
+
+  @send
+  external testAsync: (
+    skip_test,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<int>,
+  ) => unit = "skip"
+
+  @send
+  external it: (skip_it, string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
+    "skip"
+
+  @send
+  external itAsync: (skip_it, string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit =
+    "skip"
+
+  @send
+  external bench: (
+    skip_bench,
+    string,
+    @uncurry unit => Js.undefined<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "skip"
+
+  @send
+  external benchAsync: (
+    skip_bench,
+    string,
+    @uncurry unit => promise<unit>,
+    Js.undefined<benchOptions>,
+  ) => unit = "skip"
+
+  include MakeRunner({
+    let describe = describe(skip_describe, ...)
+
+    let test = test(skip_test, ...)
+    let testAsync = testAsync(skip_test, ...)
+
+    let it = it(skip_it, ...)
+    let itAsync = itAsync(skip_it, ...)
+
+    let bench = bench(skip_bench, ...)
+    let benchAsync = benchAsync(skip_bench, ...)
+  })
+
+  module Concurrent = {
+    type concurrent_describe
+    type concurrent_test
+    type concurrent_it
+    type concurrent_bench
+
+    %%private(
+      @get
+      external concurrent_describe: skip_describe => concurrent_describe = "skip"
+
+      @get
+      external concurrent_test: skip_test => concurrent_test = "skip"
+
+      @get
+      external concurrent_it: skip_it => concurrent_it = "skip"
+
+      @get
+      external concurrent_bench: skip_bench => concurrent_bench = "skip"
+    )
+
+    @send
+    external describe: (
+      concurrent_describe,
+      string,
+      @uncurry unit => Js.undefined<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external testAsync: (
+      concurrent_test,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external itAsync: (
+      concurrent_it,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<int>,
+    ) => unit = "concurrent"
+
+    @send
+    external benchAsync: (
+      concurrent_bench,
+      string,
+      @uncurry unit => promise<unit>,
+      Js.undefined<benchOptions>,
+    ) => unit = "concurrent"
+
+    include MakeConcurrentRunner({
+      let describe = describe(concurrent_describe(skip_describe, ...), ...)
+      let testAsync = testAsync(concurrent_test(skip_test, ...), ...)
+      let itAsync = itAsync(concurrent_it(skip_it, ...), ...)
+      let benchAsync = benchAsync(concurrent_bench(skip_bench, ...), ...)
+    })
+  }
+}
+
+module type EachType = {
+  let test: (array<'a>, string, ~timeout: int=?, 'a => unit) => unit
+  let test2: (array<('a, 'b)>, string, ~timeout: int=?, ('a, 'b) => unit) => unit
+  let test3: (array<('a, 'b, 'c)>, string, ~timeout: int=?, ('a, 'b, 'c) => unit) => unit
+  let test4: (array<('a, 'b, 'c, 'd)>, string, ~timeout: int=?, ('a, 'b, 'c, 'd) => unit) => unit
+  let test5: (
+    array<('a, 'b, 'c, 'd, 'e)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd, 'e) => unit,
+  ) => unit
+
+  let testAsync: (array<'a>, string, ~timeout: int=?, 'a => promise<unit>) => unit
+  let test2Async: (array<('a, 'b)>, string, ~timeout: int=?, ('a, 'b) => promise<unit>) => unit
+  let test3Async: (
+    array<('a, 'b, 'c)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c) => promise<unit>,
+  ) => unit
+  let test4Async: (
+    array<('a, 'b, 'c, 'd)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd) => promise<unit>,
+  ) => unit
+  let test5Async: (
+    array<('a, 'b, 'c, 'd, 'e)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd, 'e) => promise<unit>,
+  ) => unit
+
+  let describe: (array<'a>, string, ~timeout: int=?, 'a => unit) => unit
+  let describe2: (array<('a, 'b)>, string, ~timeout: int=?, ('a, 'b) => unit) => unit
+  let describe3: (array<('a, 'b, 'c)>, string, ~timeout: int=?, ('a, 'b, 'c) => unit) => unit
+  let describe4: (
+    array<('a, 'b, 'c, 'd)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd) => unit,
+  ) => unit
+  let describe5: (
+    array<('a, 'b, 'c, 'd, 'e)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd, 'e) => unit,
+  ) => unit
+
+  let describeAsync: (array<'a>, string, ~timeout: int=?, 'a => promise<unit>) => unit
+  let describe2Async: (array<('a, 'b)>, string, ~timeout: int=?, ('a, 'b) => promise<unit>) => unit
+  let describe3Async: (
+    array<('a, 'b, 'c)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c) => promise<unit>,
+  ) => unit
+  let describe4Async: (
+    array<('a, 'b, 'c, 'd)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd) => promise<unit>,
+  ) => unit
+  let describe5Async: (
+    array<('a, 'b, 'c, 'd, 'e)>,
+    string,
+    ~timeout: int=?,
+    ('a, 'b, 'c, 'd, 'e) => promise<unit>,
+  ) => unit
+}
+
+module Each: EachType = {
+  module Ext = {
+    type test
+    type describe
+
+    @module("vitest") @val
+    external test: test = "test"
+
+    @module("vitest") @val
+    external describe: describe = "describe"
+
+    @send
+    external testObj: (
+      ~test: test,
+      ~cases: array<'a>) => (
+      ~name: string,
+      ~f: @uncurry 'a => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test2: (
+      ~test: test,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test3: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test4: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test5: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external testObjAsync: (
+      ~test: test,
+      ~cases: array<'a>) => (
+      ~name: string,
+      ~f: @uncurry 'a => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test2Async: (
+      ~test: test,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test3Async: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test4Async: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external test5Async: (
+      ~test: test,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describeObj: (
+      ~describe: describe,
+      ~cases: array<'a>) => (
+      ~name: string,
+      ~f: @uncurry 'a => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe2: (
+      ~describe: describe,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe3: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe4: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe5: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => unit,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describeObjAsync: (
+      ~describe: describe,
+      ~cases: array<'a>) => (
+      ~name: string,
+      ~f: @uncurry 'a => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe2Async: (
+      ~describe: describe,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe3Async: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe4Async: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+
+    @send
+    external describe5Async: (
+      ~describe: describe,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
+      ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => promise<unit>,
+      ~timeout: Js.undefined<int>,
+    ) => unit = "each"
+  }
+
+  @inline
+  let test = (cases, name, ~timeout=?, f) =>
+    Ext.testObj(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test2 = (cases, name, ~timeout=?, f) =>
+    Ext.test2(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test3 = (cases, name, ~timeout=?, f) =>
+    Ext.test3(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test4 = (cases, name, ~timeout=?, f) =>
+    Ext.test4(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test5 = (cases, name, ~timeout=?, f) =>
+    Ext.test5(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let testAsync = (cases, name, ~timeout=?, f) =>
+    Ext.testObjAsync(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test2Async = (cases, name, ~timeout=?, f) =>
+    Ext.test2Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test3Async = (cases, name, ~timeout=?, f) =>
+    Ext.test3Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test4Async = (cases, name, ~timeout=?, f) =>
+    Ext.test4Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let test5Async = (cases, name, ~timeout=?, f) =>
+    Ext.test5Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+
+  @inline
+  let describe = (cases, name, ~timeout=?, f) =>
+    Ext.describeObj(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe2 = (cases, name, ~timeout=?, f) =>
+    Ext.describe2(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe3 = (cases, name, ~timeout=?, f) =>
+    Ext.describe3(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe4 = (cases, name, ~timeout=?, f) =>
+    Ext.describe4(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe5 = (cases, name, ~timeout=?, f) =>
+    Ext.describe5(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describeAsync = (cases, name, ~timeout=?, f) =>
+    Ext.describeObjAsync(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe2Async = (cases, name, ~timeout=?, f) =>
+    Ext.describe2Async(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe3Async = (cases, name, ~timeout=?, f) =>
+    Ext.describe3Async(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe4Async = (cases, name, ~timeout=?, f) =>
+    Ext.describe4Async(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+
+  @inline
+  let describe5Async = (cases, name, ~timeout=?, f) =>
+    Ext.describe5Async(~describe=Ext.describe, ~cases)(
+      ~name,
+      ~f,
+      ~timeout=timeout->Js.Undefined.fromOption,
+    )
+}
+
+module Todo = {
+  type todo_describe
+  type todo_test
+  type todo_it
+
+  %%private(
+    @module("vitest") @val
+    external todo_describe: todo_describe = "describe"
+
+    @module("vitest") @val
+    external todo_test: todo_test = "test"
+
+    @module("vitest") @val
+    external todo_it: todo_it = "it"
+  )
+
+  @send external describe: (todo_describe, string) => unit = "todo"
+  @inline let describe = name => todo_describe->describe(name)
+
+  @send external test: (todo_test, string) => unit = "todo"
+  @inline let test = name => todo_test->test(name)
+
+  @send external it: (todo_it, string) => unit = "todo"
+  @inline let it = name => todo_it->it(name)
+}
+
+@module("vitest") @val external beforeEach: (@uncurry unit => unit) => unit = "beforeEach"
+
+@module("vitest") @val
+external beforeEachPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit =
+  "beforeEach"
+
+@inline
+let beforeEachPromise = (~timeout=?, callback) =>
+  beforeEachPromise(callback, timeout->Js.Undefined.fromOption)
+
+@module("vitest") external beforeAll: (@uncurry unit => unit) => unit = "beforeAll"
+
+@module("vitest")
+external beforeAllPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "beforeAll"
+
+@inline
+let beforeAllPromise = (~timeout=?, callback) =>
+  beforeAllPromise(callback, timeout->Js.Undefined.fromOption)
+
+@module("vitest") external afterEach: (@uncurry unit => unit) => unit = "afterEach"
+
+@module("vitest")
+external afterEachPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "afterEach"
+
+@inline
+let afterEachPromise = (~timeout=?, callback) =>
+  afterEachPromise(callback, timeout->Js.Undefined.fromOption)
+
+@module("vitest")
+external afterAllPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "afterAll"
+
+@inline
+let afterAllPromise = (~timeout=?, callback) =>
+  afterAllPromise(callback, timeout->Js.Undefined.fromOption)
+
+module Matchers = (
+  Config: {
+    type return<'a>
+    let emptyReturn: return<'a>
+  },
+) => {
+  @get external not: expected<'a> => expected<'a> = "not"
+
+  @send external toBe: (expected<'a>, 'a) => Config.return<'a> = "toBe"
+
+  @send external eq: (expected<'a>, 'a) => Config.return<'a> = "eq"
+
+  @send external toBeDefined: expected<Js.undefined<'a>> => Config.return<'a> = "toBeDefined"
+
+  @send external toBeUndefined: expected<Js.undefined<'a>> => Config.return<'a> = "toBeUndefined"
+
+  @send external toBeTruthy: expected<'a> => Config.return<'a> = "toBeTruthy"
+
+  @send external toBeFalsy: expected<'a> => Config.return<'a> = "toBeFalsy"
+
+  @send external toBeNull: expected<Js.null<'a>> => Config.return<'a> = "toBeNull"
+
+  // @send external toBeInstanceOf: (expected<'a>, ?) => Config.return<'a> = "toBeInstanceOf"
+
+  @send external toEqual: (expected<'a>, 'a) => Config.return<'a> = "toEqual"
+
+  @inline
+  let toBeSome = (~some=?, expected: expected<option<'a>>) => {
+    expected->cast_expeceted->not->toBeUndefined->ignore
+    switch some {
+    | Some(id) => expected->toEqual(id)
+    | None => Config.emptyReturn
+    }
+  }
+
+  @inline
+  let toBeNone = (expected: expected<option<'a>>) => {
+    expected->cast_expeceted->toBeUndefined
+  }
+
+  @send external toStrictEqual: (expected<'a>, 'a) => Config.return<'a> = "toStrictEqual"
+
+  @send external toContain: (expected<array<'a>>, 'a) => Config.return<'a> = "toContain"
+
+  @send external toContainEqual: (expected<array<'a>>, 'a) => Config.return<'a> = "toContainEqual"
+
+  @send external toMatchSnapshot: expected<'a> => Config.return<'a> = "toMatchSnapshot"
+
+  @send
+  external toThrow: (expected<unit => 'a>, Js.undefined<string>) => Config.return<'a> = "toThrow"
+  @inline
+  let toThrow = (~message=?, expected) => expected->toThrow(message->Js.Undefined.fromOption)
+
+  @send
+  external toThrowError: (expected<unit => 'a>, Js.undefined<string>) => Config.return<'a> =
+    "toThrowError"
+  @inline
+  let toThrowError = (~message=?, expected) =>
+    expected->toThrowError(message->Js.Undefined.fromOption)
+
+  module Int = {
+    type t = int
+    type expected = expected<t>
+
+    @send external toBeGreaterThan: (expected, t) => Config.return<'a> = "toBeGreaterThan"
+
+    @send
+    external toBeGreaterThanOrEqual: (expected, t) => Config.return<'a> = "toBeGreaterThanOrEqual"
+
+    @send external toBeLessThan: (expected, t) => Config.return<'a> = "toBeLessThan"
+
+    @send external toBeLessThanOrEqual: (expected, t) => Config.return<'a> = "toBeLessThanOrEqual"
+  }
+
+  module Float = {
+    type t = float
+    type expected = expected<t>
+
+    @send external toBeNaN: expected => Config.return<'a> = "toBeNaN"
+
+    @send
+    external toBeCloseTo: (expected, t, int) => Config.return<'a> = "toBeCloseTo"
+
+    @send
+    external toBeGreaterThan: (expected, t) => Config.return<'a> = "toBeGreaterThan"
+
+    @send
+    external toBeGreaterThanOrEqual: (expected, t) => Config.return<'a> = "toBeGreaterThanOrEqual"
+
+    @send
+    external toBeLessThan: (expected, t) => Config.return<'a> = "toBeLessThan"
+
+    @send
+    external toBeLessThanOrEqual: (expected, t) => Config.return<'a> = "toBeLessThanOrEqual"
+  }
+
+  module String = {
+    type t = string
+    type expected = expected<t>
+
+    @send external toContain: (expected, t) => Config.return<'a> = "toContain"
+
+    @send external toHaveLength: (expected, int) => Config.return<'a> = "toHaveLength"
+
+    @send external toMatch: (expected, Js.Re.t) => Config.return<'a> = "toMatch"
+  }
+
+  module Array = {
+    @send external toContain: (expected<array<'a>>, 'a) => Config.return<'a> = "toContain"
+
+    @send external toHaveLength: (expected<array<'a>>, int) => Config.return<'a> = "toHaveLength"
+
+    @send external toMatch: (expected<array<'a>>, array<'a>) => Config.return<'a> = "toMatchObject"
+  }
+
+  module List = {
+    @inline
+    let toContain = (expected, item) => {
+      expected->unwrap->Belt.List.toArray->wrap->Array.toContain(item)
+    }
+
+    @inline
+    let toHaveLength = (expected, length) => {
+      expected->unwrap->Belt.List.toArray->wrap->Array.toHaveLength(length)
+    }
+
+    @inline
+    let toMatch = (expected, list) => {
+      expected->unwrap->Belt.List.toArray->wrap->Array.toMatch(list->Belt.List.toArray)
+    }
+  }
+
+  module Dict = {
+    @send
+    external toHaveProperty: (expected<Js.Dict.t<'a>>, string, 'a) => Config.return<'a> =
+      "toHaveProperty"
+
+    @send
+    external toHaveKey: (expected<Js.Dict.t<'a>>, string) => Config.return<'a> = "toHaveProperty"
+
+    @send
+    external toMatch: (expected<Js.Dict.t<'a>>, Js.Dict.t<'a>) => Config.return<'a> =
+      "toMatchObject"
+  }
+}
+
+module Expect = {
+  include Matchers({
+    type return<'a> = unit
+    let emptyReturn = ()
+  })
+
+  module Promise = {
+    @get external rejects: expected<promise<'a>> => expected<'a> = "rejects"
+    @get external resolves: expected<promise<'a>> => expected<'a> = "resolves"
+
+    include Matchers({
+      type return<'a> = promise<unit>
+      let emptyReturn = Js.Promise2.resolve()
+    })
+
+    @send
+    external toThrow: (expected<'a>, Js.undefined<string>) => promise<unit> = "toThrow"
+    @inline
+    let toThrow = (~message=?, expected) => expected->toThrow(message->Js.Undefined.fromOption)
+
+    @send
+    external toThrowError: (expected<'a>, Js.undefined<string>) => promise<unit> = "toThrowError"
+    @inline
+    let toThrowError = (~message=?, expected) =>
+      expected->toThrowError(message->Js.Undefined.fromOption)
+  }
+}
+
+module Assert = {
+  type t
+
+  %%private(@module("vitest") @val external assert_obj: t = "assert")
+
+  @send external equal: (t, 'a, 'a, Js.undefined<string>) => unit = "equal"
+
+  @inline
+  let equal = (~message=?, a, b) => assert_obj->equal(a, b, message->Js.Undefined.fromOption)
+
+  @send external deepEqual: (t, 'a, 'a, Js.undefined<string>) => unit = "deepEqual"
+
+  @inline
+  let deepEqual = (~message=?, a, b) =>
+    assert_obj->deepEqual(a, b, message->Js.Undefined.fromOption)
+}
+
+module Vi = {
+  type t
+
+  %%private(@module("vitest") @val external vi_obj: t = "vi")
+
+  @send external advanceTimersByTime: (t, int) => t = "advanceTimersByTime"
+  @inline let advanceTimersByTime = ms => vi_obj->advanceTimersByTime(ms)
+
+  @send external advanceTimersToNextTimer: t => t = "advanceTimersToNextTimer"
+  @inline let advanceTimersToNextTimer = () => vi_obj->advanceTimersToNextTimer
+
+  @send external runAllTimers: t => t = "runAllTimers"
+  @inline let runAllTimers = () => vi_obj->runAllTimers
+
+  @send external runOnlyPendingTimers: t => t = "runOnlyPendingTimers"
+  @inline let runOnlyPendingTimers = () => vi_obj->runOnlyPendingTimers
+
+  @send external useFakeTimers: t => t = "useFakeTimers"
+  @inline let useFakeTimers = () => vi_obj->useFakeTimers
+
+  @send external useRealTimers: t => t = "useRealTimers"
+  @inline let useRealTimers = () => vi_obj->useRealTimers
+
+  @send external mockCurrentDate: (t, Js.Date.t) => t = "mockCurrentDate"
+  @inline let mockCurrentDate = date => vi_obj->mockCurrentDate(date)
+
+  @send external restoreCurrentDate: (t, Js.Date.t) => t = "restoreCurrentDate"
+  @inline let restoreCurrentDate = date => vi_obj->restoreCurrentDate(date)
+
+  @send external getMockedDate: t => Js.null<Js.Date.t> = "getMockedDate"
+  @inline let getMockedDate = () => vi_obj->getMockedDate->Js.Null.toOption
+}
+
+@scope("import.meta") @val
+external inSource: bool = "vitest"
+
+module InSource = {
+  // Note:
+  // If it goes out of module scope, `import.meta.vitest` will not be bound.
+  // Therefore, `MakeRunner` cannot be reused here.
+
+  @scope("import.meta.vitest") @val
+  external describe: (string, @uncurry unit => unit) => unit = "describe"
+
+  @scope("import.meta.vitest") @val
+  external test: (string, @uncurry unit => unit) => unit = "test"
+
+  @scope("import.meta.vitest") @val
+  external testAsync: (string, @uncurry unit => promise<unit>) => unit = "test"
+
+  @scope("import.meta.vitest") @val
+  external it: (string, @uncurry unit => unit) => unit = "it"
+
+  @scope("import.meta.vitest") @val
+  external itAsync: (string, @uncurry unit => promise<unit>) => unit = "it"
+
+  @scope("import.meta.vitest") @val
+  external bench: (string, @uncurry unit => unit) => unit = "it"
+
+  @scope("import.meta.vitest") @val
+  external benchAsync: (string, @uncurry unit => promise<unit>) => unit = "it"
+}
diff --git a/node_modules/rescript-vitest/lib/ocaml/install.stamp b/node_modules/rescript-vitest/lib/ocaml/install.stamp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-vitest/src/Vitest.res b/node_modules/rescript-vitest/src/Vitest.res
index 850f915..45c6c04 100644
--- a/node_modules/rescript-vitest/src/Vitest.res
+++ b/node_modules/rescript-vitest/src/Vitest.res
@@ -149,32 +149,32 @@ module MakeConcurrentRunner = (Runner: ConcurrentRunner) => {
 
 include MakeRunner({
   @module("vitest") @val
-  external describe: (string, @uncurry (unit => Js.undefined<unit>), Js.undefined<int>) => unit =
+  external describe: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
     "describe"
 
   @module("vitest") @val
-  external test: (string, @uncurry (unit => Js.undefined<unit>), Js.undefined<int>) => unit = "test"
+  external test: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit = "test"
 
   @module("vitest") @val
-  external testAsync: (string, @uncurry (unit => promise<unit>), Js.undefined<int>) => unit = "test"
+  external testAsync: (string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit = "test"
 
   @module("vitest") @val
-  external it: (string, @uncurry (unit => Js.undefined<unit>), Js.undefined<int>) => unit = "it"
+  external it: (string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit = "it"
 
   @module("vitest") @val
-  external itAsync: (string, @uncurry (unit => promise<unit>), Js.undefined<int>) => unit = "it"
+  external itAsync: (string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit = "it"
 
   @module("vitest") @val
   external bench: (
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "bench"
 
   @module("vitest") @val
   external benchAsync: (
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "bench"
 })
@@ -203,7 +203,7 @@ module Concurrent = {
   external describe: (
     concurrent_describe,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<int>,
   ) => unit = "concurrent"
 
@@ -211,7 +211,7 @@ module Concurrent = {
   external testAsync: (
     concurrent_test,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<int>,
   ) => unit = "concurrent"
 
@@ -219,7 +219,7 @@ module Concurrent = {
   external itAsync: (
     concurrent_it,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<int>,
   ) => unit = "concurrent"
 
@@ -227,15 +227,15 @@ module Concurrent = {
   external benchAsync: (
     concurrent_bench,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "concurrent"
 
   include MakeConcurrentRunner({
-    let describe = concurrent_describe->describe
-    let testAsync = concurrent_test->testAsync
-    let itAsync = concurrent_it->itAsync
-    let benchAsync = concurrent_bench->benchAsync
+    let describe = describe(concurrent_describe, ...)
+    let testAsync = testAsync(concurrent_test, ...)
+    let itAsync = itAsync(concurrent_it, ...)
+    let benchAsync = benchAsync(concurrent_bench, ...)
   })
 }
 
@@ -263,7 +263,7 @@ module Only = {
   external describe: (
     only_describe,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<int>,
   ) => unit = "only"
 
@@ -271,7 +271,7 @@ module Only = {
   external test: (
     only_test,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<int>,
   ) => unit = "only"
 
@@ -279,23 +279,23 @@ module Only = {
   external testAsync: (
     only_test,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<int>,
   ) => unit = "only"
 
   @send
-  external it: (only_it, string, @uncurry (unit => Js.undefined<unit>), Js.undefined<int>) => unit =
+  external it: (only_it, string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
     "only"
 
   @send
-  external itAsync: (only_it, string, @uncurry (unit => promise<unit>), Js.undefined<int>) => unit =
+  external itAsync: (only_it, string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit =
     "only"
 
   @send
   external bench: (
     only_bench,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "only"
 
@@ -303,21 +303,21 @@ module Only = {
   external benchAsync: (
     only_bench,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "only"
 
   include MakeRunner({
-    let describe = only_describe->describe
+    let describe = describe(only_describe, ...)
 
-    let test = only_test->test
-    let testAsync = only_test->testAsync
+    let test = test(only_test, ...)
+    let testAsync = testAsync(only_test, ...)
 
-    let it = only_it->it
-    let itAsync = only_it->itAsync
+    let it = it(only_it, ...)
+    let itAsync = itAsync(only_it, ...)
 
-    let bench = only_bench->bench
-    let benchAsync = only_bench->benchAsync
+    let bench = bench(only_bench, ...)
+    let benchAsync = benchAsync(only_bench, ...)
   })
 
   module Concurrent = {
@@ -344,7 +344,7 @@ module Only = {
     external describe: (
       concurrent_describe,
       string,
-      @uncurry (unit => Js.undefined<unit>),
+      @uncurry unit => Js.undefined<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -352,7 +352,7 @@ module Only = {
     external testAsync: (
       concurrent_test,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -360,7 +360,7 @@ module Only = {
     external itAsync: (
       concurrent_it,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -368,15 +368,15 @@ module Only = {
     external benchAsync: (
       concurrent_bench,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<benchOptions>,
     ) => unit = "concurrent"
 
     include MakeConcurrentRunner({
-      let describe = only_describe->concurrent_describe->describe
-      let testAsync = only_test->concurrent_test->testAsync
-      let itAsync = only_it->concurrent_it->itAsync
-      let benchAsync = only_bench->concurrent_bench->benchAsync
+      let describe = describe(concurrent_describe(only_describe, ...), ...)
+      let testAsync = testAsync(concurrent_test(only_test, ...), ...)
+      let itAsync = itAsync(concurrent_it(only_it, ...), ...)
+      let benchAsync = benchAsync(concurrent_bench(only_bench, ...), ...)
     })
   }
 }
@@ -405,7 +405,7 @@ module Skip = {
   external describe: (
     skip_describe,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<int>,
   ) => unit = "skip"
 
@@ -413,7 +413,7 @@ module Skip = {
   external test: (
     skip_test,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<int>,
   ) => unit = "skip"
 
@@ -421,23 +421,23 @@ module Skip = {
   external testAsync: (
     skip_test,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<int>,
   ) => unit = "skip"
 
   @send
-  external it: (skip_it, string, @uncurry (unit => Js.undefined<unit>), Js.undefined<int>) => unit =
+  external it: (skip_it, string, @uncurry unit => Js.undefined<unit>, Js.undefined<int>) => unit =
     "skip"
 
   @send
-  external itAsync: (skip_it, string, @uncurry (unit => promise<unit>), Js.undefined<int>) => unit =
+  external itAsync: (skip_it, string, @uncurry unit => promise<unit>, Js.undefined<int>) => unit =
     "skip"
 
   @send
   external bench: (
     skip_bench,
     string,
-    @uncurry (unit => Js.undefined<unit>),
+    @uncurry unit => Js.undefined<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "skip"
 
@@ -445,21 +445,21 @@ module Skip = {
   external benchAsync: (
     skip_bench,
     string,
-    @uncurry (unit => promise<unit>),
+    @uncurry unit => promise<unit>,
     Js.undefined<benchOptions>,
   ) => unit = "skip"
 
   include MakeRunner({
-    let describe = skip_describe->describe
+    let describe = describe(skip_describe, ...)
 
-    let test = skip_test->test
-    let testAsync = skip_test->testAsync
+    let test = test(skip_test, ...)
+    let testAsync = testAsync(skip_test, ...)
 
-    let it = skip_it->it
-    let itAsync = skip_it->itAsync
+    let it = it(skip_it, ...)
+    let itAsync = itAsync(skip_it, ...)
 
-    let bench = skip_bench->bench
-    let benchAsync = skip_bench->benchAsync
+    let bench = bench(skip_bench, ...)
+    let benchAsync = benchAsync(skip_bench, ...)
   })
 
   module Concurrent = {
@@ -486,7 +486,7 @@ module Skip = {
     external describe: (
       concurrent_describe,
       string,
-      @uncurry (unit => Js.undefined<unit>),
+      @uncurry unit => Js.undefined<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -494,7 +494,7 @@ module Skip = {
     external testAsync: (
       concurrent_test,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -502,7 +502,7 @@ module Skip = {
     external itAsync: (
       concurrent_it,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<int>,
     ) => unit = "concurrent"
 
@@ -510,15 +510,15 @@ module Skip = {
     external benchAsync: (
       concurrent_bench,
       string,
-      @uncurry (unit => promise<unit>),
+      @uncurry unit => promise<unit>,
       Js.undefined<benchOptions>,
     ) => unit = "concurrent"
 
     include MakeConcurrentRunner({
-      let describe = skip_describe->concurrent_describe->describe
-      let testAsync = skip_test->concurrent_test->testAsync
-      let itAsync = skip_it->concurrent_it->itAsync
-      let benchAsync = skip_bench->concurrent_bench->benchAsync
+      let describe = describe(concurrent_describe(skip_describe, ...), ...)
+      let testAsync = testAsync(concurrent_test(skip_test, ...), ...)
+      let itAsync = itAsync(concurrent_it(skip_it, ...), ...)
+      let benchAsync = benchAsync(concurrent_bench(skip_bench, ...), ...)
     })
   }
 }
@@ -608,8 +608,8 @@ module Each: EachType = {
     @send
     external testObj: (
       ~test: test,
-      ~cases: array<'a>,
-      . ~name: string,
+      ~cases: array<'a>) => (
+      ~name: string,
       ~f: @uncurry 'a => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -617,8 +617,8 @@ module Each: EachType = {
     @send
     external test2: (
       ~test: test,
-      ~cases: array<('a, 'b)>,
-      . ~name: string,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -626,8 +626,8 @@ module Each: EachType = {
     @send
     external test3: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -635,8 +635,8 @@ module Each: EachType = {
     @send
     external test4: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c, 'd)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -644,8 +644,8 @@ module Each: EachType = {
     @send
     external test5: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c, 'd, 'e)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -653,8 +653,8 @@ module Each: EachType = {
     @send
     external testObjAsync: (
       ~test: test,
-      ~cases: array<'a>,
-      . ~name: string,
+      ~cases: array<'a>) => (
+      ~name: string,
       ~f: @uncurry 'a => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -662,8 +662,8 @@ module Each: EachType = {
     @send
     external test2Async: (
       ~test: test,
-      ~cases: array<('a, 'b)>,
-      . ~name: string,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -671,8 +671,8 @@ module Each: EachType = {
     @send
     external test3Async: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -680,8 +680,8 @@ module Each: EachType = {
     @send
     external test4Async: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c, 'd)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -689,8 +689,8 @@ module Each: EachType = {
     @send
     external test5Async: (
       ~test: test,
-      ~cases: array<('a, 'b, 'c, 'd, 'e)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -698,8 +698,8 @@ module Each: EachType = {
     @send
     external describeObj: (
       ~describe: describe,
-      ~cases: array<'a>,
-      . ~name: string,
+      ~cases: array<'a>) => (
+      ~name: string,
       ~f: @uncurry 'a => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -707,8 +707,8 @@ module Each: EachType = {
     @send
     external describe2: (
       ~describe: describe,
-      ~cases: array<('a, 'b)>,
-      . ~name: string,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -716,8 +716,8 @@ module Each: EachType = {
     @send
     external describe3: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -725,8 +725,8 @@ module Each: EachType = {
     @send
     external describe4: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c, 'd)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -734,8 +734,8 @@ module Each: EachType = {
     @send
     external describe5: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c, 'd, 'e)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => unit,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -743,8 +743,8 @@ module Each: EachType = {
     @send
     external describeObjAsync: (
       ~describe: describe,
-      ~cases: array<'a>,
-      . ~name: string,
+      ~cases: array<'a>) => (
+      ~name: string,
       ~f: @uncurry 'a => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -752,8 +752,8 @@ module Each: EachType = {
     @send
     external describe2Async: (
       ~describe: describe,
-      ~cases: array<('a, 'b)>,
-      . ~name: string,
+      ~cases: array<('a, 'b)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -761,8 +761,8 @@ module Each: EachType = {
     @send
     external describe3Async: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -770,8 +770,8 @@ module Each: EachType = {
     @send
     external describe4Async: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c, 'd)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -779,8 +779,8 @@ module Each: EachType = {
     @send
     external describe5Async: (
       ~describe: describe,
-      ~cases: array<('a, 'b, 'c, 'd, 'e)>,
-      . ~name: string,
+      ~cases: array<('a, 'b, 'c, 'd, 'e)>) => (
+      ~name: string,
       ~f: @uncurry ('a, 'b, 'c, 'd, 'e) => promise<unit>,
       ~timeout: Js.undefined<int>,
     ) => unit = "each"
@@ -788,47 +788,47 @@ module Each: EachType = {
 
   @inline
   let test = (cases, name, ~timeout=?, f) =>
-    Ext.testObj(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.testObj(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test2 = (cases, name, ~timeout=?, f) =>
-    Ext.test2(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test2(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test3 = (cases, name, ~timeout=?, f) =>
-    Ext.test3(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test3(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test4 = (cases, name, ~timeout=?, f) =>
-    Ext.test4(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test4(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test5 = (cases, name, ~timeout=?, f) =>
-    Ext.test5(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test5(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let testAsync = (cases, name, ~timeout=?, f) =>
-    Ext.testObjAsync(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.testObjAsync(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test2Async = (cases, name, ~timeout=?, f) =>
-    Ext.test2Async(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test2Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test3Async = (cases, name, ~timeout=?, f) =>
-    Ext.test3Async(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test3Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test4Async = (cases, name, ~timeout=?, f) =>
-    Ext.test4Async(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test4Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let test5Async = (cases, name, ~timeout=?, f) =>
-    Ext.test5Async(~test=Ext.test, ~cases)(. ~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
+    Ext.test5Async(~test=Ext.test, ~cases)(~name, ~f, ~timeout=timeout->Js.Undefined.fromOption)
 
   @inline
   let describe = (cases, name, ~timeout=?, f) =>
-    Ext.describeObj(~describe=Ext.describe, ~cases)(.
+    Ext.describeObj(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -836,7 +836,7 @@ module Each: EachType = {
 
   @inline
   let describe2 = (cases, name, ~timeout=?, f) =>
-    Ext.describe2(~describe=Ext.describe, ~cases)(.
+    Ext.describe2(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -844,7 +844,7 @@ module Each: EachType = {
 
   @inline
   let describe3 = (cases, name, ~timeout=?, f) =>
-    Ext.describe3(~describe=Ext.describe, ~cases)(.
+    Ext.describe3(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -852,7 +852,7 @@ module Each: EachType = {
 
   @inline
   let describe4 = (cases, name, ~timeout=?, f) =>
-    Ext.describe4(~describe=Ext.describe, ~cases)(.
+    Ext.describe4(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -860,7 +860,7 @@ module Each: EachType = {
 
   @inline
   let describe5 = (cases, name, ~timeout=?, f) =>
-    Ext.describe5(~describe=Ext.describe, ~cases)(.
+    Ext.describe5(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -868,7 +868,7 @@ module Each: EachType = {
 
   @inline
   let describeAsync = (cases, name, ~timeout=?, f) =>
-    Ext.describeObjAsync(~describe=Ext.describe, ~cases)(.
+    Ext.describeObjAsync(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -876,7 +876,7 @@ module Each: EachType = {
 
   @inline
   let describe2Async = (cases, name, ~timeout=?, f) =>
-    Ext.describe2Async(~describe=Ext.describe, ~cases)(.
+    Ext.describe2Async(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -884,7 +884,7 @@ module Each: EachType = {
 
   @inline
   let describe3Async = (cases, name, ~timeout=?, f) =>
-    Ext.describe3Async(~describe=Ext.describe, ~cases)(.
+    Ext.describe3Async(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -892,7 +892,7 @@ module Each: EachType = {
 
   @inline
   let describe4Async = (cases, name, ~timeout=?, f) =>
-    Ext.describe4Async(~describe=Ext.describe, ~cases)(.
+    Ext.describe4Async(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -900,7 +900,7 @@ module Each: EachType = {
 
   @inline
   let describe5Async = (cases, name, ~timeout=?, f) =>
-    Ext.describe5Async(~describe=Ext.describe, ~cases)(.
+    Ext.describe5Async(~describe=Ext.describe, ~cases)(
       ~name,
       ~f,
       ~timeout=timeout->Js.Undefined.fromOption,
@@ -933,38 +933,36 @@ module Todo = {
   @inline let it = name => todo_it->it(name)
 }
 
-@module("vitest") @val external beforeEach: (@uncurry (unit => unit)) => unit = "beforeEach"
+@module("vitest") @val external beforeEach: (@uncurry unit => unit) => unit = "beforeEach"
 
 @module("vitest") @val
-external beforeEachPromise: (@uncurry (unit => promise<'a>), Js.Undefined.t<int>) => unit =
+external beforeEachPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit =
   "beforeEach"
 
 @inline
 let beforeEachPromise = (~timeout=?, callback) =>
   beforeEachPromise(callback, timeout->Js.Undefined.fromOption)
 
-@module("vitest") external beforeAll: (@uncurry (unit => unit)) => unit = "beforeAll"
+@module("vitest") external beforeAll: (@uncurry unit => unit) => unit = "beforeAll"
 
 @module("vitest")
-external beforeAllPromise: (@uncurry (unit => promise<'a>), Js.Undefined.t<int>) => unit =
-  "beforeAll"
+external beforeAllPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "beforeAll"
 
 @inline
 let beforeAllPromise = (~timeout=?, callback) =>
   beforeAllPromise(callback, timeout->Js.Undefined.fromOption)
 
-@module("vitest") external afterEach: (@uncurry (unit => unit)) => unit = "afterEach"
+@module("vitest") external afterEach: (@uncurry unit => unit) => unit = "afterEach"
 
 @module("vitest")
-external afterEachPromise: (@uncurry (unit => promise<'a>), Js.Undefined.t<int>) => unit =
-  "afterEach"
+external afterEachPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "afterEach"
 
 @inline
 let afterEachPromise = (~timeout=?, callback) =>
   afterEachPromise(callback, timeout->Js.Undefined.fromOption)
 
 @module("vitest")
-external afterAllPromise: (@uncurry (unit => promise<'a>), Js.Undefined.t<int>) => unit = "afterAll"
+external afterAllPromise: (@uncurry unit => promise<'a>, Js.Undefined.t<int>) => unit = "afterAll"
 
 @inline
 let afterAllPromise = (~timeout=?, callback) =>
@@ -1203,23 +1201,23 @@ module InSource = {
   // Therefore, `MakeRunner` cannot be reused here.
 
   @scope("import.meta.vitest") @val
-  external describe: (string, @uncurry (unit => unit)) => unit = "describe"
+  external describe: (string, @uncurry unit => unit) => unit = "describe"
 
   @scope("import.meta.vitest") @val
-  external test: (string, @uncurry (unit => unit)) => unit = "test"
+  external test: (string, @uncurry unit => unit) => unit = "test"
 
   @scope("import.meta.vitest") @val
-  external testAsync: (string, @uncurry (unit => promise<unit>)) => unit = "test"
+  external testAsync: (string, @uncurry unit => promise<unit>) => unit = "test"
 
   @scope("import.meta.vitest") @val
-  external it: (string, @uncurry (unit => unit)) => unit = "it"
+  external it: (string, @uncurry unit => unit) => unit = "it"
 
   @scope("import.meta.vitest") @val
-  external itAsync: (string, @uncurry (unit => promise<unit>)) => unit = "it"
+  external itAsync: (string, @uncurry unit => promise<unit>) => unit = "it"
 
   @scope("import.meta.vitest") @val
-  external bench: (string, @uncurry (unit => unit)) => unit = "it"
+  external bench: (string, @uncurry unit => unit) => unit = "it"
 
   @scope("import.meta.vitest") @val
-  external benchAsync: (string, @uncurry (unit => promise<unit>)) => unit = "it"
+  external benchAsync: (string, @uncurry unit => promise<unit>) => unit = "it"
 }
diff --git a/node_modules/rescript-vitest/src/Vitest.res.js b/node_modules/rescript-vitest/src/Vitest.res.js
new file mode 100644
index 0000000..83a2a25
--- /dev/null
+++ b/node_modules/rescript-vitest/src/Vitest.res.js
@@ -0,0 +1,840 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Vitest from "vitest";
+import * as Belt_List from "rescript/lib/es6/belt_List.js";
+import * as Caml_option from "rescript/lib/es6/caml_option.js";
+import * as Js_undefined from "rescript/lib/es6/js_undefined.js";
+
+function MakeRunner(Runner) {
+  var describe = function (name, timeout, callback) {
+    Runner.describe(name, (function () {
+            callback();
+          }), Js_undefined.fromOption(timeout));
+  };
+  var test = function (name, timeout, callback) {
+    Runner.test(name, (function () {
+            callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  var testAsync = function (name, timeout, callback) {
+    Runner.testAsync(name, (function () {
+            return callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  var it = function (name, timeout, callback) {
+    Runner.it(name, (function () {
+            callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  var itAsync = function (name, timeout, callback) {
+    Runner.itAsync(name, (function () {
+            return callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  var bench = function (name, time, iterations, warmupTime, warmupIterations, callback) {
+    Runner.bench(name, (function () {
+            callback(Vitest.expect);
+          }), Js_undefined.fromOption({
+              time: time,
+              iterations: iterations,
+              warmupTime: warmupTime,
+              warmupIterations: warmupIterations
+            }));
+  };
+  var benchAsync = function (name, time, iterations, warmupTime, warmupIterations, callback) {
+    Runner.benchAsync(name, (function () {
+            return callback(Vitest.expect);
+          }), Js_undefined.fromOption({
+              time: time,
+              iterations: iterations,
+              warmupTime: warmupTime,
+              warmupIterations: warmupIterations
+            }));
+  };
+  return {
+          describe: describe,
+          test: test,
+          testAsync: testAsync,
+          testPromise: testAsync,
+          it: it,
+          itAsync: itAsync,
+          itPromise: itAsync,
+          bench: bench,
+          benchAsync: benchAsync,
+          benchPromise: benchAsync
+        };
+}
+
+function MakeConcurrentRunner(Runner) {
+  var describe = function (name, timeout, callback) {
+    Runner.describe(name, (function () {
+            callback();
+          }), Js_undefined.fromOption(timeout));
+  };
+  var testAsync = function (name, timeout, callback) {
+    Runner.testAsync(name, (function () {
+            return callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  var itAsync = function (name, timeout, callback) {
+    Runner.itAsync(name, (function () {
+            return callback(Vitest.expect);
+          }), Js_undefined.fromOption(timeout));
+  };
+  return {
+          describe: describe,
+          testAsync: testAsync,
+          test: testAsync,
+          itAsync: itAsync,
+          it: itAsync
+        };
+}
+
+function Runner_describe(prim0, prim1, prim2) {
+  Vitest.describe(prim0, prim1, prim2);
+}
+
+function Runner_test(prim0, prim1, prim2) {
+  Vitest.test(prim0, prim1, prim2);
+}
+
+function Runner_testAsync(prim0, prim1, prim2) {
+  Vitest.test(prim0, prim1, prim2);
+}
+
+function Runner_it(prim0, prim1, prim2) {
+  Vitest.it(prim0, prim1, prim2);
+}
+
+function Runner_itAsync(prim0, prim1, prim2) {
+  Vitest.it(prim0, prim1, prim2);
+}
+
+function Runner_bench(prim0, prim1, prim2) {
+  Vitest.bench(prim0, prim1, prim2);
+}
+
+function Runner_benchAsync(prim0, prim1, prim2) {
+  Vitest.bench(prim0, prim1, prim2);
+}
+
+function describe(name, timeout, callback) {
+  Runner_describe(name, (function () {
+          callback();
+        }), Js_undefined.fromOption(timeout));
+}
+
+function test(name, timeout, callback) {
+  Runner_test(name, (function () {
+          callback(Vitest.expect);
+        }), Js_undefined.fromOption(timeout));
+}
+
+function testAsync(name, timeout, callback) {
+  Runner_testAsync(name, (function () {
+          return callback(Vitest.expect);
+        }), Js_undefined.fromOption(timeout));
+}
+
+function it(name, timeout, callback) {
+  Runner_it(name, (function () {
+          callback(Vitest.expect);
+        }), Js_undefined.fromOption(timeout));
+}
+
+function itAsync(name, timeout, callback) {
+  Runner_itAsync(name, (function () {
+          return callback(Vitest.expect);
+        }), Js_undefined.fromOption(timeout));
+}
+
+function bench(name, time, iterations, warmupTime, warmupIterations, callback) {
+  Runner_bench(name, (function () {
+          callback(Vitest.expect);
+        }), Js_undefined.fromOption({
+            time: time,
+            iterations: iterations,
+            warmupTime: warmupTime,
+            warmupIterations: warmupIterations
+          }));
+}
+
+function benchAsync(name, time, iterations, warmupTime, warmupIterations, callback) {
+  Runner_benchAsync(name, (function () {
+          return callback(Vitest.expect);
+        }), Js_undefined.fromOption({
+            time: time,
+            iterations: iterations,
+            warmupTime: warmupTime,
+            warmupIterations: warmupIterations
+          }));
+}
+
+function describe$1(name, timeout, callback) {
+  var extra = function () {
+    callback();
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.describe.concurrent(name, extra, extra$1);
+}
+
+function testAsync$1(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.concurrent(name, extra, extra$1);
+}
+
+function itAsync$1(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.concurrent(name, extra, extra$1);
+}
+
+var Concurrent = {
+  describe: describe$1,
+  testAsync: testAsync$1,
+  test: testAsync$1,
+  itAsync: itAsync$1,
+  it: itAsync$1
+};
+
+function describe$2(name, timeout, callback) {
+  var extra = function () {
+    callback();
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.describe.only(name, extra, extra$1);
+}
+
+function test$1(name, timeout, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.only(name, extra, extra$1);
+}
+
+function testAsync$2(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.only(name, extra, extra$1);
+}
+
+function it$1(name, timeout, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.only(name, extra, extra$1);
+}
+
+function itAsync$2(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.only(name, extra, extra$1);
+}
+
+function bench$1(name, time, iterations, warmupTime, warmupIterations, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption({
+        time: time,
+        iterations: iterations,
+        warmupTime: warmupTime,
+        warmupIterations: warmupIterations
+      });
+  Vitest.bench.only(name, extra, extra$1);
+}
+
+function benchAsync$1(name, time, iterations, warmupTime, warmupIterations, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption({
+        time: time,
+        iterations: iterations,
+        warmupTime: warmupTime,
+        warmupIterations: warmupIterations
+      });
+  Vitest.bench.only(name, extra, extra$1);
+}
+
+function describe$3(name, timeout, callback) {
+  var extra = function () {
+    callback();
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.describe.only.concurrent(name, extra, extra$1);
+}
+
+function testAsync$3(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.only.concurrent(name, extra, extra$1);
+}
+
+function itAsync$3(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.only.concurrent(name, extra, extra$1);
+}
+
+var Concurrent$1 = {
+  describe: describe$3,
+  testAsync: testAsync$3,
+  test: testAsync$3,
+  itAsync: itAsync$3,
+  it: itAsync$3
+};
+
+var Only = {
+  describe: describe$2,
+  test: test$1,
+  testAsync: testAsync$2,
+  testPromise: testAsync$2,
+  it: it$1,
+  itAsync: itAsync$2,
+  itPromise: itAsync$2,
+  bench: bench$1,
+  benchAsync: benchAsync$1,
+  benchPromise: benchAsync$1,
+  Concurrent: Concurrent$1
+};
+
+function describe$4(name, timeout, callback) {
+  var extra = function () {
+    callback();
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.describe.skip(name, extra, extra$1);
+}
+
+function test$2(name, timeout, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.skip(name, extra, extra$1);
+}
+
+function testAsync$4(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.skip(name, extra, extra$1);
+}
+
+function it$2(name, timeout, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.skip(name, extra, extra$1);
+}
+
+function itAsync$4(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.skip(name, extra, extra$1);
+}
+
+function bench$2(name, time, iterations, warmupTime, warmupIterations, callback) {
+  var extra = function () {
+    callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption({
+        time: time,
+        iterations: iterations,
+        warmupTime: warmupTime,
+        warmupIterations: warmupIterations
+      });
+  Vitest.bench.skip(name, extra, extra$1);
+}
+
+function benchAsync$2(name, time, iterations, warmupTime, warmupIterations, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption({
+        time: time,
+        iterations: iterations,
+        warmupTime: warmupTime,
+        warmupIterations: warmupIterations
+      });
+  Vitest.bench.skip(name, extra, extra$1);
+}
+
+function describe$5(name, timeout, callback) {
+  var extra = function () {
+    callback();
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.describe.skip.concurrent(name, extra, extra$1);
+}
+
+function testAsync$5(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.test.skip.concurrent(name, extra, extra$1);
+}
+
+function itAsync$5(name, timeout, callback) {
+  var extra = function () {
+    return callback(Vitest.expect);
+  };
+  var extra$1 = Js_undefined.fromOption(timeout);
+  Vitest.it.skip.concurrent(name, extra, extra$1);
+}
+
+var Concurrent$2 = {
+  describe: describe$5,
+  testAsync: testAsync$5,
+  test: testAsync$5,
+  itAsync: itAsync$5,
+  it: itAsync$5
+};
+
+var Skip = {
+  describe: describe$4,
+  test: test$2,
+  testAsync: testAsync$4,
+  testPromise: testAsync$4,
+  it: it$2,
+  itAsync: itAsync$4,
+  itPromise: itAsync$4,
+  bench: bench$2,
+  benchAsync: benchAsync$2,
+  benchPromise: benchAsync$2,
+  Concurrent: Concurrent$2
+};
+
+function test$3(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test2(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test3(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test4(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test5(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function testAsync$6(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test2Async(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test3Async(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test4Async(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function test5Async(cases, name, timeout, f) {
+  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe$6(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe2(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe3(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe4(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe5(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describeAsync(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe2Async(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe3Async(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe4Async(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+function describe5Async(cases, name, timeout, f) {
+  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
+}
+
+var Each = {
+  test: test$3,
+  test2: test2,
+  test3: test3,
+  test4: test4,
+  test5: test5,
+  testAsync: testAsync$6,
+  test2Async: test2Async,
+  test3Async: test3Async,
+  test4Async: test4Async,
+  test5Async: test5Async,
+  describe: describe$6,
+  describe2: describe2,
+  describe3: describe3,
+  describe4: describe4,
+  describe5: describe5,
+  describeAsync: describeAsync,
+  describe2Async: describe2Async,
+  describe3Async: describe3Async,
+  describe4Async: describe4Async,
+  describe5Async: describe5Async
+};
+
+function describe$7(name) {
+  Vitest.describe.todo(name);
+}
+
+function test$4(name) {
+  Vitest.test.todo(name);
+}
+
+function it$3(name) {
+  Vitest.it.todo(name);
+}
+
+var Todo = {
+  describe: describe$7,
+  test: test$4,
+  it: it$3
+};
+
+function beforeEachPromise(timeout, callback) {
+  Vitest.beforeEach(callback, Js_undefined.fromOption(timeout));
+}
+
+function beforeAllPromise(timeout, callback) {
+  Vitest.beforeAll(callback, Js_undefined.fromOption(timeout));
+}
+
+function afterEachPromise(timeout, callback) {
+  Vitest.afterEach(callback, Js_undefined.fromOption(timeout));
+}
+
+function afterAllPromise(timeout, callback) {
+  Vitest.afterAll(callback, Js_undefined.fromOption(timeout));
+}
+
+function Matchers(Config) {
+  var toBeSome = function (some, expected) {
+    expected.not.toBeUndefined();
+    if (some !== undefined) {
+      return expected.toEqual(Caml_option.valFromOption(some));
+    } else {
+      return Config.emptyReturn;
+    }
+  };
+  var toBeNone = function (expected) {
+    return expected.toBeUndefined();
+  };
+  var toThrow = function (message, expected) {
+    return expected.toThrow(Js_undefined.fromOption(message));
+  };
+  var toThrowError = function (message, expected) {
+    return expected.toThrowError(Js_undefined.fromOption(message));
+  };
+  var Int = {};
+  var Float = {};
+  var $$String = {};
+  var $$Array = {};
+  var toContain = function (expected, item) {
+    return Belt_List.toArray(expected).toContain(item);
+  };
+  var toHaveLength = function (expected, length) {
+    return Belt_List.toArray(expected).toHaveLength(length);
+  };
+  var toMatch = function (expected, list) {
+    return Belt_List.toArray(expected).toMatchObject(Belt_List.toArray(list));
+  };
+  var List = {
+    toContain: toContain,
+    toHaveLength: toHaveLength,
+    toMatch: toMatch
+  };
+  var Dict = {};
+  return {
+          toBeSome: toBeSome,
+          toBeNone: toBeNone,
+          toThrow: toThrow,
+          toThrowError: toThrowError,
+          Int: Int,
+          Float: Float,
+          $$String: $$String,
+          $$Array: $$Array,
+          List: List,
+          Dict: Dict
+        };
+}
+
+function toBeSome(some, expected) {
+  expected.not.toBeUndefined();
+  if (some !== undefined) {
+    return expected.toEqual(Caml_option.valFromOption(some));
+  }
+  
+}
+
+function toBeNone(expected) {
+  return expected.toBeUndefined();
+}
+
+function toThrow(message, expected) {
+  return expected.toThrow(Js_undefined.fromOption(message));
+}
+
+function toThrowError(message, expected) {
+  return expected.toThrowError(Js_undefined.fromOption(message));
+}
+
+var Int = {};
+
+var Float = {};
+
+var $$String = {};
+
+var $$Array = {};
+
+function toContain(expected, item) {
+  return Belt_List.toArray(expected).toContain(item);
+}
+
+function toHaveLength(expected, length) {
+  return Belt_List.toArray(expected).toHaveLength(length);
+}
+
+function toMatch(expected, list) {
+  return Belt_List.toArray(expected).toMatchObject(Belt_List.toArray(list));
+}
+
+var List = {
+  toContain: toContain,
+  toHaveLength: toHaveLength,
+  toMatch: toMatch
+};
+
+var Dict = {};
+
+var emptyReturn = Promise.resolve();
+
+function toBeSome$1(some, expected) {
+  expected.not.toBeUndefined();
+  if (some !== undefined) {
+    return expected.toEqual(Caml_option.valFromOption(some));
+  } else {
+    return emptyReturn;
+  }
+}
+
+function toBeNone$1(expected) {
+  return expected.toBeUndefined();
+}
+
+var Int$1 = {};
+
+var Float$1 = {};
+
+var $$String$1 = {};
+
+var $$Array$1 = {};
+
+function toContain$1(expected, item) {
+  return Belt_List.toArray(expected).toContain(item);
+}
+
+function toHaveLength$1(expected, length) {
+  return Belt_List.toArray(expected).toHaveLength(length);
+}
+
+function toMatch$1(expected, list) {
+  return Belt_List.toArray(expected).toMatchObject(Belt_List.toArray(list));
+}
+
+var List$1 = {
+  toContain: toContain$1,
+  toHaveLength: toHaveLength$1,
+  toMatch: toMatch$1
+};
+
+var Dict$1 = {};
+
+function toThrow$1(message, expected) {
+  return expected.toThrow(Js_undefined.fromOption(message));
+}
+
+function toThrowError$1(message, expected) {
+  return expected.toThrowError(Js_undefined.fromOption(message));
+}
+
+var $$Promise = {
+  toBeSome: toBeSome$1,
+  toBeNone: toBeNone$1,
+  Int: Int$1,
+  Float: Float$1,
+  $$String: $$String$1,
+  $$Array: $$Array$1,
+  List: List$1,
+  Dict: Dict$1,
+  toThrow: toThrow$1,
+  toThrowError: toThrowError$1
+};
+
+var Expect = {
+  toBeSome: toBeSome,
+  toBeNone: toBeNone,
+  toThrow: toThrow,
+  toThrowError: toThrowError,
+  Int: Int,
+  Float: Float,
+  $$String: $$String,
+  $$Array: $$Array,
+  List: List,
+  Dict: Dict,
+  $$Promise: $$Promise
+};
+
+function equal(message, a, b) {
+  Vitest.assert.equal(a, b, Js_undefined.fromOption(message));
+}
+
+function deepEqual(message, a, b) {
+  Vitest.assert.deepEqual(a, b, Js_undefined.fromOption(message));
+}
+
+var Assert = {
+  equal: equal,
+  deepEqual: deepEqual
+};
+
+function advanceTimersByTime(ms) {
+  return Vitest.vi.advanceTimersByTime(ms);
+}
+
+function advanceTimersToNextTimer() {
+  return Vitest.vi.advanceTimersToNextTimer();
+}
+
+function runAllTimers() {
+  return Vitest.vi.runAllTimers();
+}
+
+function runOnlyPendingTimers() {
+  return Vitest.vi.runOnlyPendingTimers();
+}
+
+function useFakeTimers() {
+  return Vitest.vi.useFakeTimers();
+}
+
+function useRealTimers() {
+  return Vitest.vi.useRealTimers();
+}
+
+function mockCurrentDate(date) {
+  return Vitest.vi.mockCurrentDate(date);
+}
+
+function restoreCurrentDate(date) {
+  return Vitest.vi.restoreCurrentDate(date);
+}
+
+function getMockedDate() {
+  return Caml_option.null_to_opt(Vitest.vi.getMockedDate());
+}
+
+var Vi = {
+  advanceTimersByTime: advanceTimersByTime,
+  advanceTimersToNextTimer: advanceTimersToNextTimer,
+  runAllTimers: runAllTimers,
+  runOnlyPendingTimers: runOnlyPendingTimers,
+  useFakeTimers: useFakeTimers,
+  useRealTimers: useRealTimers,
+  mockCurrentDate: mockCurrentDate,
+  restoreCurrentDate: restoreCurrentDate,
+  getMockedDate: getMockedDate
+};
+
+var InSource = {};
+
+var testPromise = testAsync;
+
+var itPromise = itAsync;
+
+var benchPromise = benchAsync;
+
+export {
+  MakeRunner ,
+  MakeConcurrentRunner ,
+  describe ,
+  test ,
+  testAsync ,
+  testPromise ,
+  it ,
+  itAsync ,
+  itPromise ,
+  bench ,
+  benchAsync ,
+  benchPromise ,
+  Concurrent ,
+  Only ,
+  Skip ,
+  Each ,
+  Todo ,
+  beforeEachPromise ,
+  beforeAllPromise ,
+  afterEachPromise ,
+  afterAllPromise ,
+  Matchers ,
+  Expect ,
+  Assert ,
+  Vi ,
+  InSource ,
+}
+/* emptyReturn Not a pure module */
